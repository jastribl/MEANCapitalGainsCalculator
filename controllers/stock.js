// Generated by CoffeeScript 1.9.3
(function() {
  var Entries, StockList, controller, express, insertAndReCalculate;

  express = require('express');

  controller = express.Router();

  Entries = require('../models/Entries');

  StockList = require('../models/StockList');

  controller.get('/stock', function(req, res) {
    var editEntry, isEdit, liveEntry, stockName;
    stockName = req.query.stockName.toUpperCase();
    isEdit = req.session.editEntry;
    liveEntry = req.session.liveEntry ? req.session.liveEntry : {};
    req.session.liveEntry = null;
    editEntry = isEdit ? req.session.editEntry : {};
    req.session.editEntry = null;
    return StockList.doesStockWithNameExist(stockName).then(function(stockExists) {
      var editId, error;
      if (stockExists) {
        editId = isEdit ? editEntry._id : false;
        return Entries.getEntriesForStockOrdered(stockName).then(function(entries) {
          entries.stockName = stockName;
          return res.render('stock', {
            title: stockName,
            entries: entries,
            liveEntry: liveEntry,
            editEntry: editEntry,
            editId: editId
          });
        });
      } else {
        error = {
          status: '404',
          stack: 'You have attemped to gain access to stock \'' + stockName + '\'\n But you do not have that stock!'
        };
        return res.render('error', {
          error: error
        });
      }
    });
  });

  controller.post('/addentry', function(req, res) {
    var liveEntry;
    liveEntry = req.body;
    return Entries.getEntryCountMatchingData(liveEntry).then(function(count) {
      if (count === 0) {
        insertAndReCalculate(liveEntry);
      } else {
        req.session.liveEntry = liveEntry;
      }
      return res.redirect('/stock?stockName=' + liveEntry.stockName);
    });
  });

  controller.post('/editmode', function(req, res) {
    var entry;
    entry = req.body;
    return Entries.getEntryById(entry._id).then(function(editEntry) {
      req.session.editEntry = editEntry;
      return res.redirect('/stock?stockName=' + editEntry.stockName);
    });
  });

  controller.post('/editentry', function(req, res) {
    var entry;
    entry = req.body;
    return Entries.getEntryById(entry._id).then(function(oldEntry) {
      return Entries.getEntryWithMatchingTimeData(entry).then(function(conflictEntry) {
        if ((conflictEntry && conflictEntry._id.toString() === entry._id.toString()) || !conflictEntry) {
          Entries.removeEntryById(oldEntry._id).then(function() {
            return insertAndReCalculate(entry);
          });
        } else {
          req.session.editEntry = oldEntry;
        }
        return res.redirect('/stock?stockName=' + entry.stockName);
      });
    });
  });

  controller.post('/canceledit', function(req, res) {
    return res.redirect('stock?stockName=' + req.body.stockName);
  });

  controller.post('/deleteentry', function(req, res) {
    var entry;
    entry = req.body;
    return Entries.removeEntryById(entry._id).then(function() {
      return res.redirect('stock?stockName=' + entry.stockName);
    });
  });

  module.exports = controller;

  insertAndReCalculate = function(newEntry) {
    var stockName;
    Entries.addEntry(newEntry);
    stockName = newEntry.stockName;
    return Entries.getEntriesForStockOrdered(stockName).then(function(entries) {
      return StockList.getStockByName(stockName).then(function(initialValues) {
        var lastEntry, ref;
        lastEntry = {
          quanity: +initialValues.number,
          totalshares: +initialValues.number,
          acbperunit: (ref = +initialValues.number === 0) != null ? ref : {
            0: +initialValues.acb / +initialValues.number
          },
          acbtotal: +initialValues.acb
        };
        return Entries.deleteAllEntriesForStockWithName(stockName).then(function() {
          return entries.forEach(function(entry) {
            if (entry.buysell === 'buy') {
              entry.totalshares = +lastEntry.totalshares + +entry.quanity;
              entry.acbtotal = +lastEntry.acbtotal + (+entry.price * +entry.quanity) + +entry.commission;
              entry.acbperunit = +entry.acbtotal / +entry.totalshares;
            } else if (entry.buysell === 'sell') {
              entry.totalshares = +lastEntry.totalshares - +entry.quanity;
              if (entry.totalshares < 0) {
                entry.problem = true;
              }
              if (entry.totalshares === 0) {
                entry.acbtotal = 0;
                entry.acbperunit = 0;
              } else {
                entry.acbtotal = +lastEntry.getACBTotal - (+entry.quanity * +lastEntry.acbtotal / +lastEntry.totalshares);
                entry.acbperunit = +entry.acbtotal / +entry.totalshares;
              }
              entry.capitalgainloss = ((+entry.price * +entry.quanity) - +entry.commission) - (+lastEntry.acbperunit * +entry.quanity);
            }
            lastEntry = entry;
            return Entries.updateEntry(entry);
          });
        });
      });
    });
  };

}).call(this);
