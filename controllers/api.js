// Generated by CoffeeScript 1.9.3
(function() {
  var Entries, Stocks, api, calculateEntries, express;

  express = require('express');

  api = express.Router();

  Stocks = require('../models/Stocks');

  Entries = require('../models/Entries');

  api.get('/api/stocks', function(req, res) {
    return Stocks.getStocks().then(function(Stocks) {
      return res.json(Stocks);
    });
  });

  api["delete"]('/api/stocks', function(req, res) {
    var stockName;
    stockName = req.query.stockName;
    return Stocks.deleteStockWithName(stockName).then(function() {
      return Entries.deleteAllEntriesForStockWithName(stockName).then(function() {
        return res.sendStatus(200);
      });
    });
  });

  api.post('/api/stocks', function(req, res) {
    var stock;
    stock = JSON.parse(req.query.stock);
    stock.stockName = stock.stockName.toUpperCase();
    if (!stock.number) {
      stock.number = 0;
    }
    if (!stock.acb) {
      stock.acb = 0;
    }
    return Stocks.addStock(stock).then(function() {
      return res.json(stock);
    });
  });

  api.get('/api/entriesList', function(req, res) {
    var stockName;
    stockName = req.query.stockName;
    if (stockName) {
      return Entries.getEntriesForStockOrdered(stockName).then(function(entriesList) {
        return res.json(entriesList);
      });
    } else {
      return Entries.getAllEntries().then(function(entriesList) {
        return res.json(entriesList);
      });
    }
  });

  api.post('/api/entriesList', function(req, res) {
    var entry;
    entry = JSON.parse(req.query.entry);
    return Entries.addEntry(entry).then(function(addedEntry) {
      return calculateEntries(addedEntry).then(function(changedEntries) {
        return res.json(changedEntries);
      });
    });
  });

  api["delete"]('/api/entriesList', function(req, res) {
    var entry;
    entry = JSON.parse(req.query.entry);
    return Entries.removeEntryById(entry._id).then(function() {
      return calculateEntries(entry, true).then(function(changedEntries) {
        return res.json(changedEntries);
      });
    });
  });

  api.put('/api/entriesList', function(req, res) {
    var entry;
    entry = JSON.parse(req.query.entry);
    return Entries.updateEntry(entry).then(function(updatedEntry) {
      return calculateEntries(updatedEntry).then(function(changedEntries) {
        return res.json(changedEntries);
      });
    });
  });

  module.exports = api;

  calculateEntries = function(insertedEntry, reCalculateAll) {
    var stockName;
    stockName = insertedEntry.stockName;
    return Entries.getEntriesForStockOrdered(stockName).then(function(entriesList) {
      return Stocks.getStockByName(stockName).then(function(initialValues) {
        var going, lastEntry, listOfModifiedEntries, ref;
        lastEntry = {
          quantity: initialValues.number,
          totalshares: initialValues.number,
          acbperunit: (ref = initialValues.number === 0) != null ? ref : {
            0: initialValues.acb / initialValues.number
          },
          acbtotal: initialValues.acb
        };
        going = reCalculateAll;
        listOfModifiedEntries = [];
        entriesList.forEach(function(entry) {
          if (going || entry._id.toString() === insertedEntry._id.toString()) {
            going = true;
            if (entry.buysell === 'buy') {
              entry.totalshares = lastEntry.totalshares + entry.quantity;
              entry.acbtotal = lastEntry.acbtotal + (entry.price * entry.quantity) + entry.commission;
              entry.acbperunit = entry.acbtotal / entry.totalshares;
              if (entry.capitalgainloss) {
                delete entry.capitalgainloss;
              }
            } else if (entry.buysell === 'sell') {
              entry.totalshares = lastEntry.totalshares - entry.quantity;
              if (entry.totalshares < 0) {
                entry.problem = true;
              }
              if (entry.totalshares === 0) {
                entry.acbtotal = 0;
                entry.acbperunit = 0;
              } else {
                entry.acbtotal = lastEntry.getACBTotal - (entry.quantity * lastEntry.acbtotal / lastEntry.totalshares);
                entry.acbperunit = entry.acbtotal / entry.totalshares;
              }
              entry.capitalgainloss = ((entry.price * entry.quantity) - entry.commission) - (lastEntry.acbperunit * entry.quantity);
            }
            Entries.updateEntry(entry);
            listOfModifiedEntries.push(entry);
          }
          return lastEntry = entry;
        });
        return listOfModifiedEntries;
      });
    });
  };

}).call(this);
