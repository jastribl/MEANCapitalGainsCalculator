// Generated by CoffeeScript 1.9.3
(function() {
  var stockApp;

  stockApp = angular.module('stockApp', []);

  stockApp.filter('moneyFilter', function() {
    return function(number) {
      if (!number) {
        return '$0.00';
      } else {
        return '$' + number;
      }
    };
  });

  stockApp.controller('StockController', function($scope, $http) {
    var addEntry, adjustTradeNumbers, i, j, ref, refocusForm, removeEntryById, resetForm, results, results1, updateEntries;
    $scope.years = (function() {
      results = [];
      for (var i = 2000, ref = new Date().getFullYear() + 1; 2000 <= ref ? i <= ref : i >= ref; 2000 <= ref ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this);
    $scope.months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    $scope.days = (function() {
      results1 = [];
      for (j = 1; j <= 31; j++){ results1.push(j); }
      return results1;
    }).apply(this);
    $scope.adjustTradeNumber = function(adjustEntry) {
      var conflictEntries, entry, k, len, ref1, results2;
      if (adjustEntry) {
        conflictEntries = [];
        ref1 = $scope.entriesList;
        for (k = 0, len = ref1.length; k < len; k++) {
          entry = ref1[k];
          if (entry._id !== adjustEntry._id) {
            if (entry.year === adjustEntry.year && entry.month === adjustEntry.month && entry.day === adjustEntry.day) {
              conflictEntries.push(entry.tradeNumber);
            } else if (entry.year > adjustEntry.year && entry.month > adjustEntry.month && entry.day > adjustEntry.day) {
              if (conflictEntries.length === 0 || conflictEntries.indexOf(adjustEntry.tradeNumber) === -1) {
                return;
              }
              break;
            }
          }
        }
        results2 = [];
        while (true) {
          if (conflictEntries.indexOf(adjustEntry.tradeNumber) === -1) {
            break;
          }
          results2.push(adjustEntry.tradeNumber++);
        }
        return results2;
      }
    };
    $scope.validEntry = function(entry) {
      if (!entry) {
        return false;
      }
      return !entry.tradeNumber || !entry.quantity || !entry.price || !entry.commission;
    };
    $scope.add = function() {
      return $http.post('/api/entriesList?entry=' + JSON.stringify($scope.newEntry)).then(function(updatedEntries) {
        updateEntries(updatedEntries.data);
        resetForm();
        return refocusForm();
      });
    };
    $scope.remove = function(entry) {
      return $http["delete"]('/api/entriesList?entry=' + JSON.stringify(entry)).then(function(updatedEntries) {
        removeEntryById(entry._id);
        updateEntries(updatedEntries.data);
        adjustTradeNumbers();
        return refocusForm();
      });
    };
    $scope.editMode = function(entry) {
      return $scope.editEntry = angular.copy(entry);
    };
    $scope.confirmEdit = function() {
      return $http.put('/api/entriesList?entry=' + JSON.stringify($scope.editEntry)).then(function(updatedEntries) {
        updateEntries(updatedEntries.data);
        delete $scope.editEntry;
        return refocusForm();
      });
    };
    $scope.cancelEdit = function() {
      delete $scope.editEntry;
      refocusForm();
    };
    addEntry = function(entry) {
      return $scope.entriesList.push(entry);
    };
    removeEntryById = function(_id) {
      var entry, index, k, len, ref1;
      ref1 = $scope.entriesList;
      for (index = k = 0, len = ref1.length; k < len; index = ++k) {
        entry = ref1[index];
        if (entry._id === _id) {
          $scope.entriesList.splice(index, 1);
          break;
        }
      }
    };
    updateEntries = function(updatedEntries) {
      var k, len, results2, updatedEntry;
      results2 = [];
      for (k = 0, len = updatedEntries.length; k < len; k++) {
        updatedEntry = updatedEntries[k];
        results2.push((removeEntryById(updatedEntry._id), addEntry(updatedEntry)));
      }
      return results2;
    };
    resetForm = function() {
      adjustTradeNumbers();
      delete $scope.newEntry.price;
      return delete $scope.newEntry.quantity;
    };
    refocusForm = function() {
      return $('#newEntryAutofocusElement').focus();
    };
    adjustTradeNumbers = function() {
      $scope.adjustTradeNumber($scope.newEntry);
      return $scope.adjustTradeNumber($scope.editEntry);
    };
    return $http.get('/api/entriesList?stockName=' + $scope.stockName).then(function(entriesList) {
      $scope.entriesList = entriesList.data;
      $scope.newEntry = {
        stockName: $scope.stockName,
        year: new Date().getFullYear(),
        month: new Date().getMonth() + 1,
        day: new Date().getDate(),
        tradeNumber: 1,
        buysell: 'buy',
        commission: 9.99
      };
      adjustTradeNumbers();
      return refocusForm();
    });
  });

}).call(this);
